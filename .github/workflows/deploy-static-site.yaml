name: Deploy and Secure Static Website

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./authenticated-cloud-docs/
    container: jch254/docker-node-serverless
    steps:
    - name: Obtain latest git for Alpine and other requirements (before checkout)
      run: apk add git zip gettext jq --update-cache
      working-directory: ./
    - uses: actions/checkout@v2
    - name: Install git and update/init submodules
      run: git submodule update --init
    - name: Import environment variables from .env
      id: import-env
      shell: bash
      run: |
        while read line; do
          echo "$line" >> $GITHUB_ENV
        done < .env
    - name: Install docusaurus
      run: |
        cd ./deployment
        npx @docusaurus/init@latest init tmp classic
    - name: Configure and build docusaurus site
      run: |
        cd ./deployment
        cp ../config/docusaurus/docusaurus.config.js ./tmp
        cd ./tmp
        rm -rf docs src static  # Remove default content including conflicting ./src/pages/index.js
        cp -r ../../content/* .  # Get docs, src, and static from our content directory
        npm run build
    - name: "Configure AWS Credentials"
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2
    - name: Patch cloudfront-auth to allow non-interative (CLI) use
      run: |
        cd ./deployment/cloudfront-auth
        sed -i"" "s/^prompt.start/prompt.override=require('minimist')(process.argv.slice(2), opts={boolean:true, string:['method', 'AUTHZ']});prompt.start/" build/build.js
    - name: Install id_rsa key (from manual run of cloudfront-auth)
      run: |
        cd ./deployment/cloudfront-auth
        mkdir -p distributions/$AAD_SSO__RESULT_NAME/
        echo "${{ secrets.AAD_SSO__ID_RSA }}" > distributions/$AAD_SSO__RESULT_NAME/id_rsa
        echo "${{ secrets.AAD_SSO__ID_RSA_PUB }}" > distributions/$AAD_SSO__RESULT_NAME/id_rsa.pub
    - name: Run cloudfront-auth to generate AWS CloudFront Lambda@Edge function (Microsoft Azure AD)
      run: |
        cd ./deployment/cloudfront-auth
        npm run-script build -- --SESSION_DURATION=$AAD_SSO__SESSION_DURATION --method=2 --AUTHZ=1 --distribution=$AAD_SSO__RESULT_NAME --trailing_slash_redirects_enabled --simple_urls_enabled --TENANT=$AAD_SSO__TENANT --CLIENT_ID=$AAD_SSO__CLIENT_ID --CLIENT_SECRET=${{ secrets.AAD_SSO__CLIENT_SECRET }} --REDIRECT_URI=$AAD_SSO__REDIRECT_URI
    - name: Copy AAD SSO lambda function zip to deployment dir
      run: |
        cd ./deployment/
        mkdir -p resources/lambda/
        cp cloudfront-auth/distributions/$AAD_SSO__RESULT_NAME/$AAD_SSO__RESULT_NAME.zip resources/lambda/
    - name: Build the CDK App
      run: cd deployment; npm i && npm run build
    - name: Substitute .env vars into CDK configuration and deploy the CDK App
      run: |
        cd ./deployment
        export PULL_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
        echo "Pull request number is $PULL_NUMBER"
        echo "(Pull request should be visible above)"
        cat cdk.json.template | envsubst > cdk.json
        cat cdk.json
        cat cdk.context.json.template | envsubst > cdk.context.json
        cat cdk.context.json
        #npm run cdk deploy -- --require-approval never
    - name: Comment on the PR with the full published domain
      env:
        URL: ${{ github.event.issue.comments_url }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        curl \
          -X POST \
          $URL \
          -H "Content-Type: application/json" \
          -H "Authorization: token $GITHUB_TOKEN" \
          --data '{ "body": "'`cat full_published_domain.txt`'" }'
